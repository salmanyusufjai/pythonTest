from google.cloud import bigquery

def fetch_and_decrypt_data(dataset_id, table_id, fields_to_decrypt):
    # Initialize a BigQuery client
    client = bigquery.Client()

    # Helper function to handle nested fields within arrays and rawfields
    def decrypt_nested_fields(field):
        parts = field.split('.')
        nested_array = parts[-3]
        nested_field = parts[-1]
        return f"""
            ARRAY(
                SELECT AS STRUCT *,
                    decrypt_function(rawfields.{nested_field}) AS {nested_field}
                FROM UNNEST({nested_array}.rawfields) AS rawfields
            ) AS rawfields
        """

    # Construct the SQL query for decrypting the fields within rawfields
    decrypt_clauses_account = [decrypt_nested_fields(field) for field in fields_to_decrypt if 'account' in field]
    decrypt_clauses_subject = [decrypt_nested_fields(field) for field in fields_to_decrypt if 'subject' in field]
    
    # Construct the SQL query to select all fields and apply decryption
    query = f"""
    SELECT 
        *,
        ARRAY(
            SELECT AS STRUCT latest.*,
                {','.join(decrypt_clauses_account)}
            FROM UNNEST(account.latest) AS latest
        ) AS account_latest,
        ARRAY(
            SELECT AS STRUCT latest.*,
                {','.join(decrypt_clauses_subject)}
            FROM UNNEST(subject.latest) AS latest
        ) AS subject_latest
    FROM `{dataset_id}.{table_id}`
    """

    # Execute the query
    query_job = client.query(query)

    # Fetch the results
    results = query_job.result()

    # Convert results to list of dictionaries
    rows = [dict(row) for row in results]

    return rows

# Example usage:
dataset_id = "your_dataset_id"  # Replace with your dataset ID
table_id = "your_table_id"      # Replace with your table ID
fields_to_decrypt = ["account.latest.rawfields.f1", "subject.latest.rawfields.s1"]  # Specify fields to decrypt

# Fetch and decrypt data
decrypted_data = fetch_and_decrypt_data(dataset_id, table_id, fields_to_decrypt)

# Print the decrypted data
for row in decrypted_data:
    print(row)
