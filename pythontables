from google.cloud import bigquery
from google.cloud.bigquery import TimePartitioning, PartitionRange

# Initialize BigQuery client
client = bigquery.Client()

# Define the dataset ID
dataset_id = 'your_dataset_id'  # Replace with your dataset ID

# Define partitioning configuration for March 1, 2024
partitioning = TimePartitioning(
    type_=bigquery.TimePartitioningType.DAY,
    field="_PARTITIONTIME",
    expiration_ms=7776000000,  # Optional: partition expiration (in milliseconds)
    require_partition_filter=True  # Optional: require partition filter
)

# Define table schemas and create table configurations
tables = {
    "scorecheck": [
        bigquery.SchemaField("entitykey", "STRING", mode="REQUIRED"),
        bigquery.SchemaField("companynumber", "STRING", mode="REQUIRED"),
        bigquery.SchemaField("score", "FLOAT", mode="REQUIRED"),
        bigquery.SchemaField("grade", "STRING", mode="REQUIRED"),
        bigquery.SchemaField("processingdate", "STRING", mode="REQUIRED")
    ],
    "acl": [
        bigquery.SchemaField("entitykey", "STRING", mode="REQUIRED"),
        bigquery.SchemaField("companynumber", "STRING", mode="REQUIRED"),
        bigquery.SchemaField("finallimit", "FLOAT", mode="REQUIRED"),
        bigquery.SchemaField("processingdate", "STRING", mode="REQUIRED")
    ],
    "noliacl": [
        bigquery.SchemaField("entitykey", "STRING", mode="REQUIRED"),
        bigquery.SchemaField("companynumber", "STRING", mode="REQUIRED"),
        bigquery.SchemaField("finallimit", "FLOAT", mode="REQUIRED"),
        bigquery.SchemaField("grade", "STRING", mode="REQUIRED"),
        bigquery.SchemaField("score", "FLOAT", mode="REQUIRED"),
        bigquery.SchemaField("processingdate", "STRING", mode="REQUIRED")
    ],
    "protectscore": [
        bigquery.SchemaField("entitykey", "STRING", mode="REQUIRED"),
        bigquery.SchemaField("companynumber", "STRING", mode="REQUIRED"),
        bigquery.SchemaField("protectcode", "STRING", mode="REQUIRED"),
        bigquery.SchemaField("protectscore", "FLOAT", mode="REQUIRED"),
        bigquery.SchemaField("processingdate", "STRING", mode="REQUIRED")
    ]
}

# Function to create a partitioned table
def create_partitioned_table(table_id, schema):
    table = bigquery.Table(table_id, schema=schema)
    table.time_partitioning = partitioning
    table = client.create_table(table)  # API request
    print(f"Created table {table.project}.{table.dataset_id}.{table.table_id}")

# Create each table
for table_name, schema in tables.items():
    table_id = f"{client.project}.{dataset_id}.{table_name}"
    create_partitioned_table(table_id, schema)
